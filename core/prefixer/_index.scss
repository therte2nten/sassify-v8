@use '../../config' as config;
@use '../../devpack/completed-log-in-css' as *;

/// Миксин `prefixer` позволяет добавить CSS-свойству
/// необходимые браузерные префиксы. Миксин также позволяет добавлять
/// браузерные префиксы не только к CSS-свойствам, но и к их значениям.
/// ---
/// @name prefixer
/// @group core
/// @since 8.0.0
/// @access public
/// @author Haba Kudzaev (therteenten)
/// @link https://github.com/therteenten/sassify/blob/main/core/mixin/size/_index.scss Исходный код миксина
/// @example scss Пример использования в Sass (SCSS)
/// 	.opacity-text {
///
/// 		$-opacity-value: .5;
///
/// 		@include prefixer(
/// 			opacity,
/// 			$-opacity-value,
/// 			moz khtml
/// 		);
///
/// 	}
/// @example css Результат работы миксина в CSS
/// 	.opacity-text {
/// 		-moz-opacity: 0.5;
/// 		-khtml-opacity: 0.5;
/// 		opacity: 0.5;
/// 	}
/// @param {string} $property - CSS-свойство, которому необходимо добавить префиксы
/// @param {number | string} $value - значение CSS-свойства
/// @param {list} $prefixes [()] - список префиксов, которые будут добавлены к
/// 	CSS-свойству (`$property`)
/// @param {boolean} $save-unprefixed-property [config.$dvalues--prefixer__save-unprefixed-property] - сохранять
/// 	исходный вариант CSS-свойтсва без браузерного префикса?
/// @param {boolean} $prefix-value [config.$dvalues--prefixer__prefix-value] - добавлять
/// 	префиксы не к CSS-свойству, а к его значению?
@mixin prefixer(
	$property,
	$value,
	$prefixes: (),
	$save-unprefixed-property: config.$dvalues--prefixer__save-unprefixed-property,
	$prefix-value: config.$dvalues--prefixer__prefix-value) {

	// Если значение параметра `$prefixes` равно `all`,
	// то добавляем к CSS-свойству все префиксы из
	// списка `config.$prefixes--all`:
	@if $prefixes == all {

		// А еще, если значение параметра `$prefix-value`
		// равно `true`, то добавляем префиксы не к CSS-свойству, а
		// к его значению:
		@if $prefix-value == true {
			@each $prefix in config.$prefixes--all {
				@include completed-log-in-css('prefixer', 'prefix for «#{$prefix}»');
				#{$property}: -#{$prefix}-#{$value};
			}
		}

		// Если значение параметра `$prefix-value`
		// равно `false`, то добавляем префиксы к CSS-свойству, а не
		// к его значению:
		@else {
			@each $prefix in config.$prefixes--all {
				@include completed-log-in-css('prefixer', 'prefix for «#{$prefix}»');
				-#{$prefix}-#{$property}: #{$value};
			}
		}

	}

	// Если значение параметра `$prefixes` отлично от `all`,
	// то подставляем в качестве префикса значения из списка
	// в параметре `$prefixes`:
	@else {

		// А еще, если значение параметра `$prefix-value`
		// равно `true`, то добавляем префиксы не к CSS-свойству, а
		// к его значению:
		@if $prefix-value == true {
			@each $prefix in $prefixes {
				@include completed-log-in-css('prefixer', 'prefix for «#{$prefix}»');
				#{$property}: -#{$prefix}-#{$value};
			}
		}

		// Если значение параметра `$prefix-value`
		// равно `false`, то добавляем префиксы к CSS-свойству, а не
		// к его значению:
		@else {
			@each $prefix in $prefixes {
				@include completed-log-in-css('prefixer', 'prefix for «#{$prefix}»');
				-#{$prefix}-#{$property}: #{$value};
			}
		}

	}

	// А также, если значение параметра `$save-unprefixed-property`
	// равно `true`, то добавляем в конце CSS-свойство без префикса:
	@if $save-unprefixed-property == true {
		@include completed-log-in-css('prefixer', 'unprefixed value «#{$value}»');
		#{$property}: #{$value};
	}

}
