@use '../../../config' as config;
@use '../../../devpack/invalid-value-message' as *;
@use '../../utility/validator/is-list-contains' as *;
@use '../../utility/validator/is-string' as *;
@use '../../prefixer' as *;

/// > Свойство `transform-style` CSS определяет
/// > положение дочернего элемента в 3D-пространстве
/// > или в той же плоскости, что и родительский
/// > элемент.
/// >
/// > Если `flat`, то дочерний элемент не будет
/// > существовать в своём собственном 3D-пространстве.
/// >
/// > Поскольку это свойство не наследуется,
/// > его следует устанавливать для всех не прямых
/// > потомков элемента.
/// >
/// > &mdash; [mdn web docs](https://developer.mozilla.org/ru/docs/Web/CSS/transform-style)
///
/// > Определяет, как дочерние элементы будут
/// > отображаться в 3D-пространстве. Это свойство
/// > должно использоваться совместно с `transform`.
/// >
/// > &mdash; [WebReference](https://webref.ru/css/transform-style)
///
/// Миксин `transform-style` позволяет сгенерировать CSS-свойство
/// `transform-style` со всеми необходимыми браузерными префиксами.
/// ---
/// @name transform-style
/// @group core-cssex
/// @since 8.0.0
/// @access public
/// @author Haba Kudzaev (therteenten)
/// @link https://github.com/therteenten/sassify/blob/develop/core/cssex/transform-style/_index.scss Исходный код миксина
/// @example scss Пример использования в Sass (SCSS)
/// 	.selector {
/// 		@include transform-style(preserve-3d)
/// 	}
/// @example css Результат работы миксина в CSS
/// 	.selector {
/// 		-webkit-transform-style: preserve-3d;
/// 		-moz-transform-style: preserve-3d;
/// 		transform-style: preserve-3d;
/// 	}
/// @param {string} $style [config.$dvalues--transform-style] - определяет,
/// 	как дочерние элементы будут отображаться в 3D-пространстве
@mixin transform-style($style: config.$dvalues--transform-style) {

	// С помощью функций `is-string` и `is-list-contains`
	// проверяем параметр `$style`:
	// 1) на соответствие типу `String`
	// 2) на наличие параметра в списке допустимых
	@if is-string($style) and
			is-list-contains(config.$vvalues--transform-style, $style) {

		// С помощью миксина `prefixer` добавляем все
		// необходимые браузерные префиксы к CSS-свойству
		// `transform-style`:
		@include prefixer(
			transform-style,
			$style,
			config.$prefixes--transform-style
		);

	}

	// Если условие сверху не сработало, то
	// выводим сообщение об этом:
	@else {
		@include invalid-value-message('transform-style', $style, config.$vvalues--transform-style);
	}

}
