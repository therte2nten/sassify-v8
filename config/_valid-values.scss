/// @name vvalues--position-sticky__sides
/// @group config/
/// @since 7.0.0
/// @access public
/// @type list
$vvalues--position-sticky__sides: top right bottom left !default;

/// #### `static`
/// Это значение позволяет элементу находиться в обычном его
/// состоянии, расположенном на своём месте в документе. Свойства
/// `top`, `right`, `bottom`, `left` и `z-index` не применяются к данному
/// элементу. Это значение по умолчанию.
///
/// #### `relative`
/// Элемент позиционируется в соответствии с нормальным потоком
/// документа, а затем смещается относительно себя на основе
/// значений `top`, `right`, `bottom` и `left`. Смещение не влияет на положение
/// любых других элементов; таким образом, пространство, заданное для
/// элемента в макете страницы, такое же, как если бы позиция была `static`.
/// Это значение создаёт новый [контекст наложения](https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context),
/// когда значение `z-index` не `auto`. Его влияние на элементы `table-*-group`,
/// `table-row`, `table-column`, `table-cell` и `table-caption` не определено.
///
/// #### `absolute`
/// Элемент удаляется из обычного потока документов, и для элемента в макете страницы
/// не создаётся пробела. Он расположен относительно его ближайшего относительно
/// позиционированного предка, если таковой имеется; в противном случае он
/// помещается относительно исходного [содержащего блока](https://developer.mozilla.org/ru/docs/Web/CSS/Containing_block).
/// Его конечная позиция определяется значениями `top`, `right`, `bottom`, и `left`.
/// Это значение создаёт новый [контекст наложения](https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context),
/// когда значение `z-index` не `auto`. Поля абсолютно позиционированных коробок не
/// [сворачиваются](https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing) с другими полями.
///
/// #### `fixed`
/// Элемент выбивается из обычного потока документа, и для элемента в макете страницы
/// не создаётся пространство. Он позиционируется относительно исходного [содержащего блока](https://developer.mozilla.org/ru/docs/Web/CSS/Containing_block),
/// установленного [`viewport`](https://developer.mozilla.org/ru/docs/Glossary/Viewport), за
/// исключением случаев, когда один из его предков имеет свойство `transform`, `perspective`,
/// или `filter`, установленное на что-то иное, кроме none (см. [CSS Transforms Spec](https://www.w3.org/TR/css-transforms-1/#propdef-transform)), и
/// в этом случае этот предок ведёт себя как содержащий блок. (Обратите внимание,
/// что существуют несогласованности браузера с `perspective` и `filter`, способствующими
/// содержанию формирования блоков.) Его конечная позиция определяется значениями `top`,
/// `right`, `bottom` и `left`. Это значение всегда создаёт новый [контекст наложения](https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context).
/// В печатных документах элемент помещается в одно и то же положение на каждой странице.
///
/// #### `sticky`
/// Элемент позиционируется в соответствии с нормальным потоком документа, а затем
/// смещается относительно его ближайшего прокручивающего предка и [содержащего блока](https://developer.mozilla.org/ru/docs/Web/CSS/Containing_block)
/// (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
/// на основе значений `top`, `right`, `bottom`, и `left`. Смещение не влияет на положение любых других
/// элементов.Это значение всегда создаёт новый [контекст наложения](https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context).
/// Обратите внимание, что липкий элемент «прилипает» к его ближайшему предшественнику, имеющему
/// «механизм прокрутки» (созданный при `overflow` равном `hidden`, `scroll`, `auto` или `overlay`), даже
/// если тот не является ближайшим фактически прокручивающим предком. Это эффективно препятствует
/// любому «липкому» поведению (см. [Github issue on W3C CSSWG](https://github.com/w3c/csswg-drafts/issues/865)).
/// ---
/// @name vvalues--position
/// @group config/
/// @since 7.0.0
/// @access public
/// @type list
$vvalues--position: static relative absolute fixed sticky inherit initial revert revert-layer unset !default;

/// @name vvalues--tab-size
/// @group config/
/// @since 7.0.0
/// @access public
/// @type list
$vvalues--tab-size: '<Number>' inherit initial revert revert-layer unset !default;

/// @name vvalues--size
/// @group config/
/// @since 7.0.0
/// @access public
/// @type list
$vvalues--size: normal max min !default;

/// #### `none`
/// Текст элемента и вложенных в него элементов не
/// выбирается. Обратите внимание, что объект [Selection](https://developer.mozilla.org/ru/docs/Web/API/Selection)
/// может содержать эти элементы.
///
/// #### `auto`
/// Вычисляемое значение, автоматически определяется следующим образом:
/// - Для псевдо-элементов `::before` и `::after` вычисляемое значение - `none`
/// - Если элемент является редактируемым, вычисляемое значение - `contain`
/// - Иначе, если вычисляемое значение `user-select` для родителя
/// этого элемента - `all`, вычисляемое значение - `all`
/// - Иначе, если вычисляемое значение `user-select` для родителя
/// этого элемента - `none`, вычисляемое значение - `none`
/// - Иначе, вычисляемое значение - `text`
///
/// #### `text`
/// Текст может быть выбран пользователем.
///
/// #### `all`
/// В HTML-редакторе, если двойной клик или контекстный клик
/// произошёл во вложенном элементе, будет выбрано все содержимое
/// коренного предка с этим значением свойства.
///
/// #### `contain`
/// Позволяет начать выбор внутри элемента; однако, выбор
/// будет содержаться внутри границ данного элемента.
/// ---
/// @name vvalues--user-select
/// @group config/
/// @since 7.0.0
/// @access public
/// @link https://developer.mozilla.org/ru/docs/Web/CSS/user-select user-select - CSS | MDN
/// @type list
$vvalues--user-select: auto none text all contain inherit initial revert revert-layer unset !default;
